* Logging

Logging refers to the process of recording events, activities, or data
generated by a system, application, or user. It is commonly used in
various fields, including software development, system administration,
and network management.

We will use *logging.properties* file to customize java logging

- logging.properties

#+begin_example
# Define handlers for file and console logging
handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Set global logging level to INFO
.level = INFO

# Log file output in a dedicated directory, e.g., /var/log/myapp/
java.util.logging.FileHandler.pattern = java%u.log
java.util.logging.FileHandler.limit = 50000
java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# Console logging settings
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

# Define a custom log format
java.util.logging.SimpleFormatter.format = [%1$td-%1$tm-%1$tY %1$tH:%1$tM:%1$tS] [%4$s] %5$s %n

# Set log level for a specific package, e.g., com.myapp
#com.myapp.level = WARNING
#+end_example

- Using logging.properties in java

#+begin_src java
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

public class CustomLoggingPropertiesExample {

    // Create a logger for the class
    private static final Logger logger = Logger.getLogger(CustomLoggingPropertiesExample.class.getName());

    public static void main(String[] args) {
        // Load the custom logging.properties file
        try (InputStream inputStream = CustomLoggingPropertiesExample.class.getClassLoader()
                .getResourceAsStream("logging.properties")) {
            if (inputStream == null) {
                throw new RuntimeException("logging.properties file not found!");
            }
            LogManager.getLogManager().readConfiguration(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Log messages
        logger.info("This is an INFO message."); // Will NOT be logged
        logger.warning("This is a WARNING message."); // Will NOT be logged
        logger.severe("This is a SEVERE message."); // Will be logged
    }
}
#+end_src
