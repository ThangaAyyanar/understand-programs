* Recursion

Before we try to understand recursion. we will go through few examples
in functions.

** Function
In programming, a function is a reusable block of code that performs a
specific task. Functions allow you to encapsulate logic, making your
code more organized, modular, and easier to maintain.

#+begin_src java
  public class SimpleFunction {

    static int add(int x, int y) {
	return x+y;
    }
    
    public static void main(String[] args) {
	System.out.println("Sum of two number is "+SimpleFunction.add(3,4));
    }
}

#+end_src

How to visualize or understand functions ?

#+begin_example
Main
  add(4,3) => 7
#+end_example

** Recursion
Recursion is a programming concept where a function calls itself to
solve a problem. In simple terms, it's like a process where you break
a big problem into smaller, similar problems until you reach a point
where the problem is simple enough to solve directly.

- Base condition (To stop recursion)
- Recursive case

#+begin_src java
  public class SimpleFunction {

    static int fact(int n) {
	int result;
        if (n == 1)
            return 1;
        result = fact(n - 1) * n;
        return result;
    }
    
    public static void main(String[] args) {
	System.out.println("Factorial of number is "+SimpleFunction.fact(3));
    }
}
#+end_src

#+begin_example
Main            => 6 
  fact(2) * 3   => 1*2*3
    fact(1) * 2 => 1*2
#+end_example

- Programmatically print the above function tree
#+begin_src java
  public class SimpleFunction {

    static int fact(int n, int depth) {
	int result;
        if (n == 1)
            return 1;
	String space = "  ".repeat(depth);
	String finalStr = String.format("%sFact(%d) * %d", space, n - 1, n);
	System.out.println(finalStr);
        result = fact(n - 1, depth+1) * n;
        return result;
    }
    
    public static void main(String[] args) {
	System.out.println("Main");
	System.out.println("Factorial of number is "+SimpleFunction.fact(3, 1));
    }
}
#+end_src

- Let's see one bit complex, Fibonacci

#+begin_src java
  public class SimpleFunction {
    static int Fib(int N, int depth)
    {
        if (N == 0 || N == 1)
            return N;
	String space = "  ".repeat(depth);
	System.out.println(String.format("%sFib(%d)", space, N - 1));
	int res1 = Fib(N - 1, depth+1);
	System.out.println(String.format("%sFib(%d)", space, N - 2));
	int res2 = Fib(N - 2, depth+1);
        return res1 + res2;
    }
    
    public static void main(String[] args) {
	System.out.println("Main");
	System.out.println("Fib of number is "+SimpleFunction.Fib(5, 1));
    }
}
#+end_src

#+begin_example
Main
  Fib(4)
    Fib(3)
      Fib(2)
        Fib(1)
        Fib(0)
      Fib(1)
    Fib(2)
      Fib(1)
      Fib(0)
  Fib(3)
    Fib(2)
      Fib(1)
      Fib(0)
    Fib(1)
#+end_example

- Another way to visualize it

[[file:assets/fib_tree.jpeg]]

- Let's increase the complex little bit. By analysing merge sort

  - This visualization program is done by SivaShankar
  - Ref: https://github.com/Sivar1457/Problems/blob/main/MergeSort.java

#+begin_src java
public class MergeSort {

    public void arrPrint(int [] arr,String type){
        System.out.print("\n The "+type+" : [ ");
        for ( int num : arr ) {
            System.out.print(num + " , ");
        }
        System.out.print(" ] ");
        System.out.println();
    }

    public void merge(int[] arr,int left , int mid , int right,String callerMethod,int iter) {
        System.out.println("\n"+"    ".repeat(iter)+"(Merging)  [Iteration - " + iter + " ] , Left index : " + left + " , Right index : " + right + " , Middle index : " + mid + " ------- Caller Method Name : " + callerMethod);

	// Create temporary arrays
	int[] temp = new int[right-left+1] ;
        int i = left , j = mid + 1 , k = 0 ;

	// Sorting logic
	while ( i <= mid && j <= right ) {
            if ( arr[i] < arr[j] ) {
                temp[k++] = arr[i++] ;
            }
            else {
                temp[k++] = arr[j++] ;
            }
        }

	// Copy remaining array
	while ( i <= mid ) {
            temp[k++] = arr[i++] ;
        }
        while ( j <= right ) {
            temp[k++] = arr[j++] ;
        }
        for ( i = 0 ; i < temp.length ; i++ ) {
            arr[left+i] = temp[i] ;
        }
    }

    public void separate(int[] arr,int left,int right,String callerMethod,int iter)  {
        System.out.println("\n"+"    ".repeat(iter)+"(Separating)  [Iteration - " + iter + " ] , Left index : " + left + " , Right index : " + right + " ------- Caller Method Name : " + callerMethod);
        if ( left < right ) {
	    // Find the middle point
	    int mid = (left + right) / 2;

	    // Sort first and second halves
	    separate(arr,left,mid,"separate",iter+1);
            separate(arr,mid+1,right,"separate",iter+1);

	    // Merge the sorted halves
            merge(arr,left,mid,right,"separate",iter+1);
        }
    }

    public static void main(String[] args) {
	System.out.println("--- Merge sort explanation --\n");
        MergeSort ms = new MergeSort();
        int [] arr = {43, 12, 77, 5, 38, 91, 26, 84, 19, 60,
                3, 74, 52, 67, 9, 31, 21, 88, 45, 15};
        ms.arrPrint(arr,"input");
        ms.separate(arr,0, arr.length-1,"Main",1);
        ms.arrPrint(arr,"output");
    }

}
#+end_src

- Output

#+begin_example

 The input : [ 43 , 12 , 77 , 5 , 38 , 91 , 26 , 84 , 19 , 60 , 3 , 74 , 52 , 67 , 9 , 31 , 21 , 88 , 45 , 15 ,  ] 

    (Separating)  [Iteration - 1 ] , Left index : 0 , Right index : 19 ------- Caller Method Name : Main

        (Separating)  [Iteration - 2 ] , Left index : 0 , Right index : 9 ------- Caller Method Name : separate

            (Separating)  [Iteration - 3 ] , Left index : 0 , Right index : 4 ------- Caller Method Name : separate

                (Separating)  [Iteration - 4 ] , Left index : 0 , Right index : 2 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 0 , Right index : 1 ------- Caller Method Name : separate

                        (Separating)  [Iteration - 6 ] , Left index : 0 , Right index : 0 ------- Caller Method Name : separate

                        (Separating)  [Iteration - 6 ] , Left index : 1 , Right index : 1 ------- Caller Method Name : separate

                        (Merging)  [Iteration - 6 ] , Left index : 0 , Right index : 1 , Middle index : 0 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 2 , Right index : 2 ------- Caller Method Name : separate

                    (Merging)  [Iteration - 5 ] , Left index : 0 , Right index : 2 , Middle index : 1 ------- Caller Method Name : separate

                (Separating)  [Iteration - 4 ] , Left index : 3 , Right index : 4 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 3 , Right index : 3 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 4 , Right index : 4 ------- Caller Method Name : separate

                    (Merging)  [Iteration - 5 ] , Left index : 3 , Right index : 4 , Middle index : 3 ------- Caller Method Name : separate

                (Merging)  [Iteration - 4 ] , Left index : 0 , Right index : 4 , Middle index : 2 ------- Caller Method Name : separate

            (Separating)  [Iteration - 3 ] , Left index : 5 , Right index : 9 ------- Caller Method Name : separate

                (Separating)  [Iteration - 4 ] , Left index : 5 , Right index : 7 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 5 , Right index : 6 ------- Caller Method Name : separate

                        (Separating)  [Iteration - 6 ] , Left index : 5 , Right index : 5 ------- Caller Method Name : separate

                        (Separating)  [Iteration - 6 ] , Left index : 6 , Right index : 6 ------- Caller Method Name : separate

                        (Merging)  [Iteration - 6 ] , Left index : 5 , Right index : 6 , Middle index : 5 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 7 , Right index : 7 ------- Caller Method Name : separate

                    (Merging)  [Iteration - 5 ] , Left index : 5 , Right index : 7 , Middle index : 6 ------- Caller Method Name : separate

                (Separating)  [Iteration - 4 ] , Left index : 8 , Right index : 9 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 8 , Right index : 8 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 9 , Right index : 9 ------- Caller Method Name : separate

                    (Merging)  [Iteration - 5 ] , Left index : 8 , Right index : 9 , Middle index : 8 ------- Caller Method Name : separate

                (Merging)  [Iteration - 4 ] , Left index : 5 , Right index : 9 , Middle index : 7 ------- Caller Method Name : separate

            (Merging)  [Iteration - 3 ] , Left index : 0 , Right index : 9 , Middle index : 4 ------- Caller Method Name : separate

        (Separating)  [Iteration - 2 ] , Left index : 10 , Right index : 19 ------- Caller Method Name : separate

            (Separating)  [Iteration - 3 ] , Left index : 10 , Right index : 14 ------- Caller Method Name : separate

                (Separating)  [Iteration - 4 ] , Left index : 10 , Right index : 12 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 10 , Right index : 11 ------- Caller Method Name : separate

                        (Separating)  [Iteration - 6 ] , Left index : 10 , Right index : 10 ------- Caller Method Name : separate

                        (Separating)  [Iteration - 6 ] , Left index : 11 , Right index : 11 ------- Caller Method Name : separate

                        (Merging)  [Iteration - 6 ] , Left index : 10 , Right index : 11 , Middle index : 10 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 12 , Right index : 12 ------- Caller Method Name : separate

                    (Merging)  [Iteration - 5 ] , Left index : 10 , Right index : 12 , Middle index : 11 ------- Caller Method Name : separate

                (Separating)  [Iteration - 4 ] , Left index : 13 , Right index : 14 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 13 , Right index : 13 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 14 , Right index : 14 ------- Caller Method Name : separate

                    (Merging)  [Iteration - 5 ] , Left index : 13 , Right index : 14 , Middle index : 13 ------- Caller Method Name : separate

                (Merging)  [Iteration - 4 ] , Left index : 10 , Right index : 14 , Middle index : 12 ------- Caller Method Name : separate

            (Separating)  [Iteration - 3 ] , Left index : 15 , Right index : 19 ------- Caller Method Name : separate

                (Separating)  [Iteration - 4 ] , Left index : 15 , Right index : 17 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 15 , Right index : 16 ------- Caller Method Name : separate

                        (Separating)  [Iteration - 6 ] , Left index : 15 , Right index : 15 ------- Caller Method Name : separate

                        (Separating)  [Iteration - 6 ] , Left index : 16 , Right index : 16 ------- Caller Method Name : separate

                        (Merging)  [Iteration - 6 ] , Left index : 15 , Right index : 16 , Middle index : 15 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 17 , Right index : 17 ------- Caller Method Name : separate

                    (Merging)  [Iteration - 5 ] , Left index : 15 , Right index : 17 , Middle index : 16 ------- Caller Method Name : separate

                (Separating)  [Iteration - 4 ] , Left index : 18 , Right index : 19 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 18 , Right index : 18 ------- Caller Method Name : separate

                    (Separating)  [Iteration - 5 ] , Left index : 19 , Right index : 19 ------- Caller Method Name : separate

                    (Merging)  [Iteration - 5 ] , Left index : 18 , Right index : 19 , Middle index : 18 ------- Caller Method Name : separate

                (Merging)  [Iteration - 4 ] , Left index : 15 , Right index : 19 , Middle index : 17 ------- Caller Method Name : separate

            (Merging)  [Iteration - 3 ] , Left index : 10 , Right index : 19 , Middle index : 14 ------- Caller Method Name : separate

        (Merging)  [Iteration - 2 ] , Left index : 0 , Right index : 19 , Middle index : 9 ------- Caller Method Name : separate

 The output : [ 3 , 5 , 9 , 12 , 15 , 19 , 21 , 26 , 31 , 38 , 43 , 45 , 52 , 60 , 67 , 74 , 77 , 84 , 88 , 91 ,  ]
 
#+end_example
  
